#!/usr/bin/env python3
import sys

# colors:
# - unconditional jump: black
# - conditional jump: blue
# - jump table: gray
# - fallthrough: purple
# - jump inside an if: green

print("digraph code {")
currentfunc = "top"
currentlabel = "top"
lastjump = ""
ifstack = []
for line in sys.stdin:
    words = line.strip().split()
    if not words:
        continue
    if words[0] in {"func", "if", "endif"} or words[0].endswith(":") and "%" not in words[0]:
        if words[0] == "if":
            ifstack.append(currentlabel)
            continue
        if words[0] == "endif":
            currentlabel = ifstack.pop()
            continue
        if words[0] == "func":
            label = words[1]
        else:
            label = words[0].strip(":")
        if label.startswith('.'):
            # implicit edge from fallthough
            if lastjump != "jmp" and not ifstack:
                print("  \"{}\" -> \"{}\" [color=purple];".format(currentlabel, currentfunc+label))
            currentlabel = currentfunc+label
        else:
            currentfunc = label
            currentlabel = label
        lastjump = ""
        shape = "ellipse" if "." in label else "box"
        print("  \"{}\" [label=\"{}\", shape={}]".format(currentlabel, label, shape))
    if words[0].startswith("j") or words[0] == "dw":
        for word in words:
            if word.startswith("."):
                if not ifstack:
                    lastjump = words[0]
                target = currentfunc+word
                if words[0] == "jmp":
                    if ifstack:
                        # jumps from inside ifs are psuedo-conditional
                        color = "green"
                    else:
                        color = "black"
                elif words[0] == "dw":
                    color = "gray"
                else:
                    color = "blue"
                print("  \"{}\" -> \"{}\" [color={}];".format(currentlabel, target, color))
print("}")
